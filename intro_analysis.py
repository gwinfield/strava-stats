# -*- coding: utf-8 -*-
"""intro-analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kNB7bqQ-S6t3uPBFi1bZJGAJ5Xqk7jVA

###Examining metadata and taking initial notes

Before I started coding, I took a look at the data in Excel to start examining which data I would need and what scale that data was on. I took a few notes:
- 'Elapsed Time' is in seconds
- 'Distance' is in kilometers
- Strava does not have a boxing activity, so I'll need to keep 'Activity Name' and 'Activity Description' until I sift out my boxing activities

### Importing libraries & data
"""

import pandas as pd

"""Importing the data and making sure everything looks correct."""

activities = pd.read_csv("activities.csv")
activities.head()

"""###Reducing DF size

Noting the column names I will need for my dataframe.
"""

activities.columns

"""Creating a new df with relevant columns."""

activities = activities[['Activity Date', 'Activity Name', 'Activity Type', 'Activity Description', 'Elapsed Time', 'Distance', 'Moving Time']]
activities.head()

"""###Cleaning and transforming data

Changing workouts where I could not mark them as boxing to "Boxing" in the activity type column.
"""

activities.loc[activities['Activity Name'].str.contains("box") | activities['Activity Description'].str.contains("box"), 'Activity Type'] = 'Boxing'
activities.loc[activities['Activity Type'] == "Boxing"]

"""Dropping name & description because they're no longer relevant."""

activities = activities.drop(columns=['Activity Name', 'Activity Description'])

"""Cleaning a row because the times are incorrect."""

activities.loc[activities.index == 0, ['Elapsed Time']] = 5400
activities.loc[activities.index == 0, ['Moving Time']] = 5400
activities.head()

"""Creating functions to convert km to mi and sec to min."""

def km_to_mi(km):
  return km*0.621371

def sec_to_min(sec):
  return sec/60

"""Applying these functions to affected rows."""

activities['Distance'] = activities['Distance'].apply(km_to_mi)
activities['Elapsed Time'] = activities['Elapsed Time'].apply(sec_to_min)
activities['Moving Time'] = activities['Moving Time'].apply(sec_to_min)
activities.head()

"""###Creating new columns for different aspects of date and time

Converting 'Activity Date' to datetime format, so it is easier to parse out.
"""

activities.dtypes

activities['Activity Date'] = activities['Activity Date'].astype(str)
activities['Activity Date'] = pd.to_datetime(activities['Activity Date'], format='%b %d, %Y, %I:%M:%S %p')

"""Creating a day of the week column."""

activities['Day of the Week'] = activities['Activity Date'].dt.day_name()
activities.head()

"""Parsing out day/month/year/hour."""

activities['Month'] = activities['Activity Date'].dt.month
activities['Day'] = activities['Activity Date'].dt.day
activities['Year'] = activities['Activity Date'].dt.year
activities['Hour'] = activities['Activity Date'].dt.hour
activities.head()

activities = activities.drop(columns=['Activity Date'])

"""###Filtering data to 2023

Creating a 2023 table.
"""

activities2023 = activities.loc[activities['Year'] == 2023]
activities2023.head()

"""###Filtering data by activity

Listing activities to reference later.
"""

print(activities2023['Activity Type'].unique())

"""Creating tables by activity."""

activities_list = activities2023['Activity Type'].unique().tolist()

filtered_activities = {}
for act in activities_list:
    filtered_activities[act] = activities2023.loc[activities2023['Activity Type'] == act].copy()

"""Examining one of the activities."""

filtered_activities['Workout'].head()

"""###Analyzing data and creating graphs"""

dotw_bar = activities2023['Day of the Week'].value_counts().plot(kind='bar', figsize=(6,4), title="Day of the Week Counts")
dotw_bar.set_xlabel("Day")
dotw_bar.set_ylabel("Frequency")

activities_pie = activities2023['Activity Type'].value_counts().plot(kind='pie', figsize=(10,8), title="Percent of Activity Types", autopct='%1.1f%%', fontsize=9)